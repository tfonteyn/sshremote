plugins {
    id("com.android.application")
    id("org.jetbrains.kotlin.android")
}

/*
    $HOME/.gradle/gradle.properties:
        SSHRemote.properties=$HOME/blah/blah/SSHRemote.properties

    $HOME/blah/blah/SSHRemote.properties:
        sign.storeFile=$HOME/blah/blah/keystore.jks
        sign.storePassword=MyStorePassword
        sign.keyAlias=MyKeyAlias
        sign.keyPassword=MyKeyPassword
 */
final def props = new Properties()
if (project.hasProperty("SSHRemote.properties")) {
    final def file = new File(project.property("SSHRemote.properties"))
    if (file.exists()) {
        props.load(new FileInputStream(file))
    }
}

android {
    namespace "com.hardbacknutter.sshremote"
    compileSdk = rootProject.ext.compileSdkVersion

    signingConfigs {
        release {
            storeFile file(props["sign.storeFile"])
            storePassword props["sign.storePassword"]
            keyAlias props["sign.keyAlias"]
            keyPassword props["sign.keyPassword"]
        }
    }

    defaultConfig {
        applicationId = rootProject.ext.applicationId
        versionCode = rootProject.ext.applicationVersionCode
        versionName = rootProject.ext.applicationVersionName

        minSdk = rootProject.ext.minSdkVersion
        targetSdk = rootProject.ext.targetSdkVersion

        signingConfig(signingConfigs.release)

        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled = true
            shrinkResources = true

            proguardFiles(getDefaultProguardFile("proguard-android-optimize.txt"),
                    "proguard-rules.pro")
        }

        debug {
            debuggable = true
            versionNameSuffix = "-debug"
            applicationIdSuffix = ".debug"
        }
    }


    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11

        // https://developer.android.com/studio/releases/#4-0-0-desugar
        coreLibraryDesugaringEnabled = true
    }

    kotlinOptions {
        jvmTarget = 11
    }

    buildFeatures {
        buildConfig = true
        viewBinding = true
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
            // Can be enabled to make Log.x work. OR, use Logger.x
            returnDefaultValues = false
            all {
                reports {
                    junitXml.getRequired().set(true)
                    html.getRequired().set(false)
                }
            }
        }
    }

    lint {
        // allow command line builds to complete
        abortOnError = false
    }

    applicationVariants.all {
        final variant ->
            variant.outputs.all {
                outputFileName = "${rootProject.name}-${rootProject.ext.applicationVersionName}-${variant.name}.apk"
            }
    }
}

dependencies {
    implementation project(path: ":ssh-client")
    debugImplementation project(path: ":ssh-client")

    // https://github.com/google/desugar_jdk_libs
    coreLibraryDesugaring("com.android.tools:desugar_jdk_libs_nio:${desugarVersion}")
    //
    // https://developer.android.com/jetpack/androidx/versions
    implementation("androidx.activity:activity:${androidxActivityVersion}")
    implementation("androidx.annotation:annotation:${androidxAnnotationVersion}")
    implementation("androidx.appcompat:appcompat:${androidxAppcompatVersion}")
    implementation("androidx.constraintlayout:constraintlayout:${androidxConstraintlayoutVersion}")
    implementation("androidx.coordinatorlayout:coordinatorlayout:${androidxCoordinatorlayoutVersion}")
    implementation("androidx.core:core:${androidxCoreVersion}")
    implementation("androidx.customview:customview:${androidxCustomviewVersion}")
    implementation("androidx.documentfile:documentfile:${androidxDocumentfileVersion}")
    implementation("androidx.drawerlayout:drawerlayout:${androidxDrawerlayoutVersion}")
    implementation("androidx.fragment:fragment:${androidxFragmentVersion}")
    implementation("androidx.lifecycle:lifecycle-viewmodel-ktx:${androidxLifecycleVersion}")
    implementation("androidx.lifecycle:lifecycle-livedata-ktx:${androidxLifecycleVersion}")
    implementation("androidx.preference:preference:${androidxPreferenceVersion}")
    implementation("androidx.recyclerview:recyclerview:${androidxRecyclerviewVersion}")
    implementation("androidx.room:room-runtime:${androidRoomVersion}")

    annotationProcessor("androidx.room:room-compiler:${androidRoomVersion}")

    // https://github.com/material-components/material-components-android/releases
    implementation("com.google.android.material:material:${googleMaterialVersion}")


    // local tests use JUnit5
    testImplementation("org.junit.jupiter:junit-jupiter-api:${jupiterVersion}")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${jupiterVersion}")
    testImplementation("org.junit.jupiter:junit-jupiter-params:${jupiterVersion}")

    // device tests use JUnit4
    androidTestImplementation("androidx.test:core:${androidxTestCoreVersion}")
    androidTestImplementation("androidx.test:runner:${androidxTestRunnerVersion}")
    androidTestImplementation("androidx.test:rules:${androidxTestRulesVersion}")
}
